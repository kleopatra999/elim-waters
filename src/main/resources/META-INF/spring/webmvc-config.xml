<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-3.1.xsd">
    <context:annotation-config></context:annotation-config>
    <!-- The controllers are autodetected POJOs labeled with the @Controller
        annotation. -->
    <context:component-scan base-package="com.church.elim"
                            use-default-filters="false">
        <context:include-filter expression="org.springframework.stereotype.Controller"
                                type="annotation"/>
        <context:include-filter
                expression="org.springframework.context.annotation.Configuration"
                type="annotation"/>
        <context:include-filter
                expression="org.springframework.web.bind.annotation.ControllerAdvice"
                type="annotation"/>
        <context:exclude-filter
                expression="org.springframework.stereotype.Service"
                type="annotation"/>
    </context:component-scan>

    <!-- Turns on support for mapping requests to Spring MVC @Controller methods
        Also registers default Formatters and Validators for use across all @Controllers -->
    <mvc:annotation-driven/>
    <!--  mvc:interceptors> <bean class="com.splash.web.handler.AuthorizedUserInterceptor"/></mvc:interceptors-->
    <security:global-method-security
            secured-annotations="enabled"/>
    <!-- tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/-->

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
        up static resources -->
    <mvc:resources location="/, classpath:/META-INF/web-resources/"
                   mapping="/resources/**"/>
    <!-- Handles HTTP GET requests for static resources by efficiently serving
        up content from the ${webappRoot}/** directories -->
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/img/**" location="/img/"/>
    <mvc:resources mapping="/i18n/**" location="classpath:/i18n/"/>

    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static
        resource requests to the container's default Servlet -->
    <mvc:default-servlet-handler/>

    <!-- Register "global" interceptor beans to apply to all registered HandlerMappings -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
              p:paramName="lang"/>
        <bean class="com.church.elim.interceptor.SecurityInterceptor"/>
    </mvc:interceptors>

    <!-- Selects a static view for rendering without the need for an explicit
        controller -->
    <mvc:view-controller path="/" view-name="index"/>
    <!-- mvc:view-controller path="/uncaughtException"/> <mvc:view-controller
        path="/resourceNotFound"/> <mvc:view-controller path="/dataAccessFailure"/ -->

    <!-- Resolves localized messages*.properties and application.properties
        files in the application to allow for internationalization. The messages*.properties
        files translate Roo generated messages which are part of the admin interface,
        the application.properties resource bundle localizes all application specific
        messages such as entity names and menu items. -->
    <bean
            class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
            id="messageSource2" p:basenames="classpath:/i18n/messages,classpath:/i18n/application"
            p:fallbackToSystemLocale="false"/>

    <!-- Store preferred language configuration in a cookie -->
    <bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
          id="localeResolver" p:cookieName="locale"/>

    <!-- Resolves localized <theme_name>.properties files in the classpath to
        allow for theme support -->
    <bean
            class="org.springframework.ui.context.support.ResourceBundleThemeSource"
            id="themeSource"/>

    <!-- Store preferred theme configuration in a cookie -->
    <bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
          id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

    <!-- This bean resolves specific types of exceptions to corresponding logical
        - view names for error views. The default behaviour of DispatcherServlet
        - is to propagate all exceptions to the servlet container: this will happen
        - here with all other types of exceptions. -->
    <!--bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"
        p:defaultErrorView="uncaughtException"> <property name="exceptionMappings">
        <props> <prop key=".DataAccessException">dataAccessFailure</prop> <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
        <prop key=".TypeMismatchException">resourceNotFound</prop> <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
        </props> </property> </bean -->

    <!-- Enable this for integration of file upload functionality -->
    <bean
            class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
            id="multipartResolver"/>

    <!-- Thymeleaf TemplateResolver -->
    <bean id="templateResolver"
          class="org.thymeleaf.templateresolver.ServletContextTemplateResolver"
          p:prefix="/WEB-INF/templates/" p:suffix=".html" p:templateMode="HTML5"/>

    <bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine"
          p:templateResolver-ref="templateResolver"/>

    <bean id="viewResolver" class="org.thymeleaf.spring3.view.ThymeleafViewResolver"
          p:templateEngine-ref="templateEngine">
        <property name="order" value="1"/>
    </bean>

    <bean id="personValidator" class="com.church.elim.validation.PersonValidator"/>
    <bean id="parishionerValidator" class="com.church.elim.validation.ParishionerValidator">
        <constructor-arg index="0">
            <ref bean="personValidator"/>
        </constructor-arg>
    </bean>
    <bean id="caregiverValidator" class="com.church.elim.validation.CaregiverValidator">
        <constructor-arg index="0">
            <ref bean="personValidator"/>
        </constructor-arg>
    </bean>
    <!-- Tiles ViewResolver -->
    <!-- <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
        id="tilesViewResolver"> <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
        </bean> <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
        id="tilesConfigurer"> <property name="definitions"> <list> <value>/WEB-INF/layouts/layouts.xml</value>
        Scan tiles directory for Tiles configurations <value>/WEB-INF/tiles/**/views.xml</value>
        </list> </property> </bean> -->
    <!-- support for Application Converters and Formatters -->

    <!--  bean class="org.springframework.web.accept.ContentNegotiationManager">
        <constructor-arg>
            <bean
                class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
                <constructor-arg>
                    <map>
                        <entry key="json" value="application/json" />
                        <entry key="xml" value="application/xml" />
                    </map>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean-->
</beans>
